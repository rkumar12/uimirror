apply plugin:'application'

group = "com.uimirror"
version = 1.0

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
	  if (details.requested.group == 'org.apache.tomcat.embed') {
		  details.useVersion '8.0.14'
	  }
	}
}

dependencies {
	//compile project(':uim-core')
	compile project(':ws-security')
	compile project(':ws-filters')
	compile project(':uim-oauth-client')
	compile project(':uim-sso-core')
	compile project(':uim-core-user')
	
	compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: jerseyVersion
	compile group: 'org.glassfish.jersey.ext', name: 'jersey-spring3', version: jerseyVersion
	compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-processing', version: jerseyVersion
	compile (group: 'javax', name: 'javaee-api', version: javaeeApiVersion)
	compile (group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion){
		exclude module: 'jackson-databind'
	 exclude module: 'spring-webmvc'
	 exclude module: 'spring-web'
	 exclude module: 'log4j-over-slf4j'
	 exclude module: 'jboss-logging'
	 exclude module: 'jul-to-slf4j'
	}
	testCompile (group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion)
	
}

mainClassName = "com.uimirror.account.StartApp"

jar {
	manifest {
		attributes "Implementation-Title": "UIM Account"
		attributes "Implementation-Vendor": "UIMIRROR"
		attributes "Implementation-Version": project.version
		attributes "Main-Class": mainClassName
	}
}

description = "Account Module By Uimirror Team."


applicationDefaultJvmArgs = ["-Denv=dev"
	, "-DcontextSource=classpath:application"
	, "-Dport=8080"
	, "-Dnio.port=8443"
	, "-Xmx64M"
	, "-XX:MaxNewSize=2g"
	, "-XX:NewSize=1g"
	, "-XX:SurvivorRatio=16"
	, "-XX:+UseParNewGC"
	, "-XX:+UseConcMarkSweepGC"
	, "-XX:MaxTenuringThreshold=0"
	, "-XX:CMSInitiatingOccupancyFraction=60"
	, "-XX:+CMSParallelRemarkEnabled"
	, "-XX:+UseCMSInitiatingOccupancyOnly"
	, "-XX:ParallelGCThreads=12"
	, "-XX:LargePageSizeInBytes=256m"]

task copyScripts(type: Copy) {
	from 'script'
	into "$buildDir/script"
}
task copyDoc(type: Copy) {
	from 'doc'
	into "$buildDir/docs"
}
applicationDistribution.from(copyDoc) {
	into "docs"
}
applicationDistribution.from(copyScripts) {
	fileMode = 0755
	into "scripts"
}
defaultTasks 'clean', 'build', 'intsall', 'distZip'